{"version":3,"sources":["redux/1-actions.jsx","redux/4-connect.jsx","components/card/card.jsx","components/searchBox/searchBox.jsx","App.js","redux/2-reducers.jsx","redux/3-store.jsx","index.js","redux/actionTypes.jsx"],"names":["setSearchField","text","type","CHANGE_SEARCH_FIELD","payload","requestRobots","dispatch","a","REQUEST_ROBOTS_PENDING","axios","get","data","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","Card","Robots","searchInput","filteredRobots","filter","robots","name","toLowerCase","includes","className","map","robot","key","id","src","alt","email","SearchBox","setSearchInput","onChange","e","currentTarget","value","placeholder","require","mapStateToProps","state","searchField","searchRobots","isPending","error","mapDispatchToProps","onSearchChange","event","onRequestRobots","Connect","props","useEffect","style","overflowY","border","height","connect","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.e4b44319.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\n// Setting search text in a state\r\nexport const setSearchField = (text) => ({\r\n  // we wanna recieve text here\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n// async action function\r\nexport const requestRobots = async (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  try {\r\n    const { data } = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/users\"\r\n    );\r\n    dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\n\r\nconst { setSearchField, requestRobots } = require(\"./1-actions\");\r\n\r\n// here we will map the properties we want to be in props ..\r\nexport const mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error,\r\n});\r\n\r\n// dispatch means triggering an action\r\nexport const mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => {\r\n      return dispatch(setSearchField(event)); // idk y but event.currentTarget.value is not working and just event is working\r\n    },\r\n    // async dispatch function\r\n    onRequestRobots: () => requestRobots(dispatch),\r\n  };\r\n  // setSearchField is an action which wants text .\r\n  // and onSearchChange will occur when we will call it in an input .. so it will be having event.currentTarget.value\r\n};\r\n\r\nexport const Connect = (App) =>\r\n  connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\r\n\r\n//  after https://robohash.org .. we may write anything and it will return me a picture\r\nconst Card = ({ Robots, searchInput }) => {\r\n  // Filtering arrays according to search input\r\n  const filteredRobots = Robots.filter((robots) => {\r\n    return robots.name.toLowerCase().includes(searchInput.toLowerCase()); // we are not using startsWith here bcoz includes is better\r\n  });\r\n\r\n  return (\r\n    <div className=\"\">\r\n      {filteredRobots.map((robot) => (\r\n        <div\r\n          key={robot.id}\r\n          className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"\r\n        >\r\n          <img src={`https://robohash.org/${robot.id}`} alt=\"\" />\r\n          <div className=\"\">\r\n            <h2>{robot.name}</h2>\r\n            <p>{robot.email}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ setSearchInput }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        name=\"search\"\r\n        onChange={(e) => setSearchInput(e.currentTarget.value)}\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        placeholder=\"Search Your Friend\"\r\n        id=\"\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\nimport \"./css/main.css\";\nimport Card from \"./components/card/card\";\n\nimport SearchBox from \"./components/searchBox/searchBox\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Connect,\n  mapDispatchToProps,\n  mapStateToProps,\n} from \"./redux/4-connect\";\nimport { connect } from \"react-redux\";\n\nconst App = (props) => {\n  // const [searchInput, setSearchInput] = useState(\"\"); now we'll use redux here\n\n  const { searchField, robots, isPending, error } = props;\n  const { onSearchChange, onRequestRobots } = props;\n\n  useEffect(() => {\n    onRequestRobots();\n  }, []);\n\n  return (\n    <div className=\"tc\">\n      <h1>RoboFriends</h1>\n      <SearchBox setSearchInput={onSearchChange} />\n      <div\n        style={{\n          overflowY: \"scroll\",\n          border: \"1px solid black\",\n          height: \"500px\",\n        }}\n      >\n        <Card Robots={robots} searchInput={searchField} />\n      </div>\n    </div>\n  );\n};\n\nexport default Connect(App);\n","// it takes the action and spits out the state\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./actionTypes\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n// in initial state .. searchField is empty .. and we do in normal states\r\n\r\n// we cannot change our state . so we will have to recreate it with some changes we need\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  if (action.type === CHANGE_SEARCH_FIELD) {\r\n    return { ...state, searchField: action.payload };\r\n  } else return state; // reducers must be returning something\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n// async reducer function\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  if (action.type === REQUEST_ROBOTS_PENDING) {\r\n    return { ...state, isPending: true };\r\n  } else if (action.type === REQUEST_ROBOTS_SUCCESS) {\r\n    return { ...state, robots: action.payload, isPending: false };\r\n  } else if (action.type === REQUEST_ROBOTS_FAILED) {\r\n    return { ...state, error: action.payload, isPending: false };\r\n  } else return state;\r\n};\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { searchRobots, requestRobots } from \"./2-reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst logger = createLogger();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger) // logger will log everything in console\r\n  //   composeWithDevTools()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport \"tachyons/css/tachyons.css\"; // Css Library\n\nimport { BrowserRouter, Link, NavLink, Route, Switch } from \"react-router-dom\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/3-store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={App}></Route>\n      </Switch>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\n// action types for robots which is an async function\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n"],"sourceRoot":""}