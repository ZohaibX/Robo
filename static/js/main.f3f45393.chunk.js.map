{"version":3,"sources":["redux/4-connect.tsx","components/Header/header.tsx","components/searchBox/searchBox.tsx","components/card/card.tsx","components/Main Page/main.tsx","redux/1-actions.tsx","redux/actionTypes.tsx","App.tsx","serviceWorker.js","redux/2-reducers.jsx","redux/3-store.tsx","index.tsx"],"names":["App","Header","console","log","id","SearchBox","onSearchChange","className","type","name","onChange","e","placeholder","Card","Robots","searchInput","filteredRobots","filter","robots","toLowerCase","includes","map","robot","key","src","alt","email","Main","searchField","style","overflowY","border","height","requestRobots","dispatch","a","axios","get","data","payload","mapStateToProps","state","searchRobots","isPending","error","mapDispatchToProps","event","currentTarget","value","onRequestRobots","this","props","React","Component","Connect","connect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createLogger","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","path","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f3f45393.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"./1-actions\";\r\n\r\n// here we will map the properties we want to be in props ..\r\nexport const mapStateToProps = (state: any) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error,\r\n});\r\n\r\n// dispatch means triggering an action\r\nexport const mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    // normal Input function\r\n    onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>) => {\r\n      return dispatch(setSearchField(event.currentTarget.value));\r\n      // Here we are using event.currentTarget.value ...\r\n      // so make sure we send whole event to this function\r\n      // if i send event.currentTarget.value from there .. then it will not work\r\n    },\r\n    // async dispatch function\r\n    onRequestRobots: () => dispatch(requestRobots),\r\n  };\r\n  // setSearchField is an action which wants text .\r\n  // and onSearchChange will occur when we will call it in an input .. so it will be having event.currentTarget.value\r\n};\r\n\r\nexport const Connect = (App: any) =>\r\n  connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\r\n\r\nconst Header = (): JSX.Element => {\r\n  console.log(\"Header\");\r\n  return <h1 id=\"h1\">RoboFriends</h1>;\r\n};\r\n\r\nexport default Header;\r\n","// event = React.SyntheticEvent<HTMLInputElement>\r\n\r\nimport React from \"react\";\r\n\r\nexport interface searchBoxProps {\r\n  onSearchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\r\n}\r\n\r\nconst SearchBox: React.FunctionComponent<searchBoxProps> = ({\r\n  onSearchChange,\r\n}): JSX.Element => {\r\n  console.log(\"Search\");\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        name=\"search\"\r\n        onChange={(e: React.SyntheticEvent<HTMLInputElement>) =>\r\n          onSearchChange(e)\r\n        }\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        placeholder=\"Search Your Friend\"\r\n        id=\"\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport { IRobots } from \"../../App\";\r\n\r\n//? Use of typescript with stateless components\r\n\r\nexport interface CardStatelessProps {\r\n  Robots: Array<IRobots>;\r\n  searchInput: string;\r\n}\r\n\r\n//  after https://robohash.org .. we may write anything and it will return me a picture\r\nconst Card: React.FunctionComponent<CardStatelessProps> = ({\r\n  Robots,\r\n  searchInput,\r\n}): JSX.Element => {\r\n  // Filtering arrays according to search input\r\n  const filteredRobots = Robots.filter(\r\n    (robots: any): Array<object> => {\r\n      return robots.name.toLowerCase().includes(searchInput.toLowerCase()); // we are not using startsWith here bcoz includes is better\r\n    }\r\n  );\r\n\r\n  console.log(\"Cards\");\r\n  return (\r\n    <div className=\"\">\r\n      {filteredRobots.map((robot: any): any => (\r\n        <div\r\n          key={robot.id}\r\n          className=\"bg-light-green dib br3  ma2 grow bw2 shadow-5\"\r\n        >\r\n          <img src={`https://robohash.org/${robot.id}?size=200x200`} alt=\"\" />\r\n          <div className=\"\">\r\n            <h2>{robot.name}</h2>\r\n            <p>{robot.email}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Header from \"../Header/header\";\r\nimport SearchBox from \"../searchBox/searchBox\";\r\nimport Card from \"../card/card\";\r\nimport { IRobots } from \"../../App\";\r\n\r\nexport interface MainProps {\r\n  onSearchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\r\n  robots: Array<IRobots>;\r\n  searchField: string;\r\n}\r\n\r\nconst Main: React.FunctionComponent<MainProps> = ({\r\n  onSearchChange,\r\n  robots,\r\n  searchField,\r\n}): JSX.Element => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <SearchBox onSearchChange={onSearchChange} />\r\n      <div\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          border: \"1px solid black\",\r\n          height: \"500px\",\r\n        }}\r\n      >\r\n        <Card Robots={robots} searchInput={searchField} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\n// Setting search text in a state\r\nexport const setSearchField = (text: string): object => ({\r\n  // we wanna recieve text here\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n// async action function\r\nexport const requestRobots = async (dispatch: any) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  try {\r\n    const { data } = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/users\"\r\n    );\r\n    dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\r\n  }\r\n};\r\n","export const CHANGE_SEARCH_FIELD: string = \"CHANGE_SEARCH_FIELD\";\r\n\r\n// action types for robots which is an async function\r\nexport const REQUEST_ROBOTS_PENDING: string = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS: string = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED: string = \"REQUEST_ROBOTS_FAILED\";\r\n","//? IDEA\n//! Always import the components which are to be shown on the main page ..\n//! All other components must be imported from React.lazy()\nimport React from \"react\";\nimport \"./css/main.css\";\n\nimport Main from \"./components/Main Page/main\";\nimport { Connect } from \"./redux/4-connect\";\n\n//? I converted this component in cc. to use typescript here\n\nexport interface IRobots {\n  name: string;\n  id: number;\n  email: string;\n}\n\n// props will behave according to this interface\n// if some value is not present in here . props will not use it or give an error\nexport interface Props {\n  searchField: string;\n  robots: Array<IRobots>;\n  isPending: boolean;\n  error: any;\n  onSearchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n  onRequestRobots: any;\n}\n\n// State will work according to this interface .\n// we cannot initialize any value in state .. if that value is not defined here\nexport interface State {\n  robots: Array<IRobots>;\n  searchField: string;\n}\n\nclass App extends React.Component<Props, State> {\n  state = {\n    robots: [],\n    searchField: \"\",\n  };\n\n  componentDidMount(): void {\n    // it is not returning anything\n    this.props.onRequestRobots();\n  }\n\n  render(): JSX.Element {\n    // it is returning jsx element\n    return (\n      <div className=\"tc\">\n        <Main {...this.props} />\n      </div>\n    );\n  }\n}\n\nexport default Connect(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// it takes the action and spits out the state\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./actionTypes.tsx\";\r\n\r\n// ----------------------------------------------Reducers 1--------------------------------------------\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n// in initial state .. searchField is empty .. and we do in normal states\r\n\r\n// we cannot change our state . so we will have to recreate it with some changes we need\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  if (action.type === CHANGE_SEARCH_FIELD) {\r\n    return { ...state, searchField: action.payload };\r\n  } else return state; // reducers must be returning something\r\n};\r\n\r\n//--------------------------------------------Reducer 2--------------------------------------------------\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n// async reducer function\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  if (action.type === REQUEST_ROBOTS_PENDING) {\r\n    return { ...state, isPending: true };\r\n  } else if (action.type === REQUEST_ROBOTS_SUCCESS) {\r\n    return { ...state, robots: action.payload, isPending: false };\r\n  } else if (action.type === REQUEST_ROBOTS_FAILED) {\r\n    return { ...state, error: action.payload, isPending: false };\r\n  } else return state;\r\n};\r\n","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { searchRobots, requestRobots } from \"./2-reducers.jsx\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst rootReducer: any = combineReducers({ searchRobots, requestRobots });\r\nconst logger: any = createLogger();\r\n\r\nconst store: any = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunkMiddleware /*logger*/))\r\n);\r\n// logger is for console\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport \"tachyons/css/tachyons.css\"; // Css Library\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/3-store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" render={() => <App />}></Route>\n      </Switch>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\n\n// For PWA -- register it\nserviceWorker.register();\n"],"sourceRoot":""}