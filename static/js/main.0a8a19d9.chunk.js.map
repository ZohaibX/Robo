{"version":3,"sources":["redux/1-actions.jsx","redux/4-connect.jsx","components/card/card.jsx","components/searchBox/searchBox.jsx","components/Header/header.jsx","App.js","serviceWorker.js","redux/2-reducers.jsx","redux/3-store.jsx","index.js","redux/actionTypes.jsx"],"names":["setSearchField","text","type","CHANGE_SEARCH_FIELD","payload","requestRobots","dispatch","a","REQUEST_ROBOTS_PENDING","axios","get","data","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","Card","Robots","searchInput","filteredRobots","filter","robots","name","toLowerCase","includes","console","log","className","map","robot","key","id","src","alt","email","SearchBox","setSearchInput","onChange","e","currentTarget","value","placeholder","require","mapStateToProps","state","searchField","searchRobots","isPending","error","mapDispatchToProps","onSearchChange","event","onRequestRobots","Header","Connect","props","useEffect","style","overflowY","border","height","connect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createLogger","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","path","component","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0a8a19d9.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\n// Setting search text in a state\r\nexport const setSearchField = (text) => ({\r\n  // we wanna recieve text here\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n// async action function\r\nexport const requestRobots = async (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  try {\r\n    const { data } = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/users\"\r\n    );\r\n    dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\r\n  }\r\n};\r\n","import { connect } from \"react-redux\";\r\n\r\nconst { setSearchField, requestRobots } = require(\"./1-actions\");\r\n\r\n// here we will map the properties we want to be in props ..\r\nexport const mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error,\r\n});\r\n\r\n// dispatch means triggering an action\r\nexport const mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => {\r\n      return dispatch(setSearchField(event)); // idk y but event.currentTarget.value is not working and just event is working\r\n    },\r\n    // async dispatch function\r\n    onRequestRobots: () => requestRobots(dispatch),\r\n  };\r\n  // setSearchField is an action which wants text .\r\n  // and onSearchChange will occur when we will call it in an input .. so it will be having event.currentTarget.value\r\n};\r\n\r\nexport const Connect = (App) =>\r\n  connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\r\n\r\n//  after https://robohash.org .. we may write anything and it will return me a picture\r\nconst Card = ({ Robots, searchInput }) => {\r\n  // Filtering arrays according to search input\r\n  const filteredRobots = Robots.filter((robots) => {\r\n    return robots.name.toLowerCase().includes(searchInput.toLowerCase()); // we are not using startsWith here bcoz includes is better\r\n  });\r\n\r\n  console.log(\"Cards\");\r\n  return (\r\n    <div className=\"\">\r\n      {filteredRobots.map((robot) => (\r\n        <div\r\n          key={robot.id}\r\n          className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"\r\n        >\r\n          <img src={`https://robohash.org/${robot.id}`} alt=\"\" />\r\n          <div className=\"\">\r\n            <h2>{robot.name}</h2>\r\n            <p>{robot.email}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ setSearchInput }) => {\r\n  console.log(\"Search\");\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        name=\"search\"\r\n        onChange={(e) => setSearchInput(e.currentTarget.value)}\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        placeholder=\"Search Your Friend\"\r\n        id=\"\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  console.log(\"Header\");\r\n  return <h1>RoboFriends</h1>;\r\n};\r\n\r\nexport default Header;\r\n","//? IDEA\n//! Always import the components which are to be shown on the main page ..\n//! All other components must be imported from React.lazy()\nimport React from \"react\";\nimport \"./css/main.css\";\nimport Card from \"./components/card/card\";\n\nimport SearchBox from \"./components/searchBox/searchBox\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Connect,\n  mapDispatchToProps,\n  mapStateToProps,\n} from \"./redux/4-connect\";\nimport { connect } from \"react-redux\";\nimport Header from \"./components/Header/header\";\n\nconst App = (props) => {\n  // const [searchInput, setSearchInput] = useState(\"\"); now we'll use redux here\n\n  const { searchField, robots, isPending, error } = props;\n  const { onSearchChange, onRequestRobots } = props;\n\n  useEffect(() => {\n    onRequestRobots();\n  }, []);\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox setSearchInput={onSearchChange} />\n      <div\n        style={{\n          overflowY: \"scroll\",\n          border: \"1px solid black\",\n          height: \"500px\",\n        }}\n      >\n        <Card Robots={robots} searchInput={searchField} />\n      </div>\n    </div>\n  );\n};\n\nexport default Connect(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// it takes the action and spits out the state\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./actionTypes\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n// in initial state .. searchField is empty .. and we do in normal states\r\n\r\n// we cannot change our state . so we will have to recreate it with some changes we need\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  if (action.type === CHANGE_SEARCH_FIELD) {\r\n    return { ...state, searchField: action.payload };\r\n  } else return state; // reducers must be returning something\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n// async reducer function\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  if (action.type === REQUEST_ROBOTS_PENDING) {\r\n    return { ...state, isPending: true };\r\n  } else if (action.type === REQUEST_ROBOTS_SUCCESS) {\r\n    return { ...state, robots: action.payload, isPending: false };\r\n  } else if (action.type === REQUEST_ROBOTS_FAILED) {\r\n    return { ...state, error: action.payload, isPending: false };\r\n  } else return state;\r\n};\r\n","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { searchRobots, requestRobots } from \"./2-reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst logger = createLogger();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunkMiddleware /*logger*/))\r\n);\r\n// logger is for console\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport \"tachyons/css/tachyons.css\"; // Css Library\n\nimport { BrowserRouter, Link, NavLink, Route, Switch } from \"react-router-dom\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/3-store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={App}></Route>\n      </Switch>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// For PWA -- register it\nserviceWorker.register();\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\n// action types for robots which is an async function\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n"],"sourceRoot":""}